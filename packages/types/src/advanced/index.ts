/**
 * @fileoverview Advanced TypeScript types for sophisticated type-level programming
 */

// Generic types and patterns
export type {
  DiscordEntity,
  Repository,
  TypedEventEmitter,
  EventMap,
  Builder,
  FluentBuilder,
  Manager,
  Plugin,
  PluginContext,
  PluginManager,
  CacheManager,
  Logger,
  StateManager,
  Validator,
  ValidationError,
  HTTPClient,
  RequestOptions,
  Response,
  ExtractEventData,
  InferManagerType,
  PluginConfiguration
} from './generics.js';

// Conditional types
export type {
  IsNever,
  IsAny,
  IsUnknown,
  IsFunction,
  IsArray,
  IsTuple,
  IsObject,
  Equal,
  Extends,
  Nullable,
  NonNullable,
  OptionalPropertyOf,
  RequiredPropertyOf,
  Awaited,
  DeepConditional,
  Methods,
  Properties,
  Match,
  IsBranded,
  ExtractBrand,
  DiscriminateUnion,
  Narrow,
  Widen,
  IsRecursive,
  HasCircularReference,
  DeepAnalysis
} from './conditionals.js';

// Mapped types
export type {
  SelectiveReadonly,
  SelectiveOptional,
  SelectiveRequired,
  NullableProps,
  NonNullableProps,
  PromiseProps,
  FunctionProps,
  AsyncFunctionProps,
  PrefixKeys,
  SuffixKeys,
  TransformKeys,
  CapitalizeKeys,
  LowercaseKeys,
  SnakeToCamelKeys,
  CamelToSnakeKeys,
  FilterKeys,
  PickByType,
  OmitByType,
  ConditionalMapping,
  DeepKeyMapping,
  DeepGet,
  DeepPaths,
  DeepMerge,
  Intersection,
  Difference,
  SymmetricDifference,
  ProxyType,
  BuilderMapping,
  EventHandlerMapping,
  ValidationMapping
} from './mapped.js';

// Phantom types
export type {
  Validated,
  Sanitized,
  Encrypted,
  Hashed,
  Normalized,
  Authenticated,
  Authorized,
  RateLimited,
  Cached,
  Versioned,
  Paginated,
  Sorted,
  Filtered,
  Transformed,
  Serialized,
  Compressed,
  Debounced,
  Throttled,
  Memoized,
  Immutable,
  Observable,
  Reactive,
  Traced,
  Logged,
  Monitored,
  Persisted,
  Transactional,
  Idempotent,
  Atomic,
  Linearizable,
  EventuallyConsistent,
  StronglyConsistent,
  Distributed,
  Replicated,
  Sharded,
  Partitioned,
  Indexed,
  Optimized,
  Benchmarked,
  Profiled,
  Tested,
  Documented,
  Reviewed,
  Deployed,
  Combine,
  ExtractPhantom,
  HasPhantom,
  Unphantom,
  ApplyPhantom,
  ConditionalPhantom
} from './phantom.js';

// Template literal types
export type {
  CamelCase,
  PascalCase,
  KebabCase,
  SnakeCase,
  ConstantCase,
  DotCase,
  PathCase,
  SentenceCase,
  TitleCase,
  CapitalCase,
  NoCase,
  Join,
  Split,
  Replace,
  ReplaceAll,
  Trim,
  TrimLeft,
  TrimRight,
  Pad,
  PadLeft,
  PadRight,
  Substring,
  StartsWith,
  EndsWith,
  Includes,
  Length as StringLength,
  Reverse as StringReverse,
  Uppercase,
  Lowercase,
  Capitalize,
  Uncapitalize,
  IsString,
  IsTemplate,
  ExtractTemplate,
  TemplateParameters,
  RoutePattern,
  ExtractRouteParams,
  URLBuilder,
  QueryString,
  ParseQueryString,
  StringifyQueryString,
  MethodPath,
  APIEndpoint,
  HTTPMethod,
  BuildURL,
  PathParameters,
  RouteHandlerType,
  ExtractPathParams,
  InferRouteHandler
} from './template-literals.js';

// Recursive types
export type {
  JSONValue,
  JSONObject,
  JSONArray,
  DeepReadonly,
  DeepMutable,
  DeepPartial,
  DeepRequired,
  DeepNonNullable,
  DeepPick,
  DeepOmit,
  TreeNode,
  Tree,
  FlattenTree,
  TreePaths,
  TreeLeaves,
  TreeValues,
  FindInTree,
  FilterTree,
  MapTree,
  ReduceTree,
  RecursiveArray,
  RecursiveRecord,
  CircularReference,
  SelfReference,
  MutualReference,
  RecursiveUnion,
  FixedPoint,
  Fold,
  Unfold,
  Catamorphism,
  Anamorphism,
  Hylomorphism,
  CoRecursive,
  RecursiveType,
  InfiniteSequence,
  LazyEvaluation,
  Memoization
} from './recursive.js';

// Phase 1.3: Advanced Compiler Features

// Custom transformers
export type {
  TransformerFactory,
  TransformerConfig
} from './transformers.js';

export {
  optimizePropertyAccess,
  inlineSmallFunctions,
  constantFolding,
  stripDebugCode,
  optimizeTypeAssertions,
  generateTypeValidators,
  createTransformerProgram
} from './transformers.js';

// Declaration merging
export type {
  ClientExtensions,
  ChannelExtensions,
  GuildExtensions,
  UserExtensions,
  MessageExtensions,
  EventMapExtensions,
  RESTEndpointExtensions,
  WebSocketEventExtensions,
  CacheExtensions,
  ConfigurationExtensions,
  ExtensionMethods,
  ExtensionProperties,
  WithExtensions,
  PluginDeclaration,
  PluginRegistry,
  AllExtensions,
  ClientMergeTemplate,
  EventMapMergeTemplate,
  RESTEndpointMergeTemplate,
  CacheMergeTemplate,
  ConditionalMerge,
  DeepMerge,
  MergeExtensions,
  PluginNames,
  IsPluginRegistered,
  GetPluginExtensions,
  ValidateExtension
} from './merging.js';

export {
  applyMixins,
  ExtensionRegistry,
  Extension,
  createExtension,
  mergeExtensions
} from './merging.js';

// Runtime conditionals
export type {
  FeatureFlag,
  RuntimeBehaviorConfig,
  ConditionalExecution,
  Environment,
  EnvironmentFlag,
  EnvironmentConditional,
  PerformanceMode,
  PerformanceModeFlag,
  OptimizationLevel,
  BuildMode,
  BuildConditional,
  Platform,
  PlatformConditional,
  TypeSafeConfig,
  ConditionalMethod,
  DebugInfo,
  ConditionalReturn,
  DevInfo,
  DevError,
  Result,
  CacheStrategy,
  LogLevel,
  APIResponse,
  ValidationBehavior,
  ErrorHandlingStrategy,
  ConditionalTypeChecker,
  ValidationSchema,
  ValidationError as ConditionalValidationError,
  ValidationMeta,
  ConditionalLogger,
  ConditionalCache,
  DevConfig,
  ProdConfig,
  DevMethod,
  ProdMethod,
  DevReturn,
  ProdReturn
} from './runtime-conditionals.js';

export {
  createRuntimeConfig,
  conditionalExecute
} from './runtime-conditionals.js';